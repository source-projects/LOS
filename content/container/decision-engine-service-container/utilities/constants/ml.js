'use strict';

const binary = [ {
  subsection: 'predictive_power',
  subsection_title: 'Summary',
  section: 'predictive_power',
  section_title: 'Predictive Power',
  unit: 'count',
  description: 'Measures predictive power on a scale of 0 to 1, based on the area under the Receiver Operating Characteristic (ROC) curve. Higher values indicate more powerful models.',
  cardTitle: 'Predictive Power: Summary',
  chartFunc: '_getPredictivePowerChart',
  filters: [ /*'_getAccuracyRateChartTypeFilter',*/ '_getDataSourceTypeFilter', ],
  // dataFunc: '_transformDataSourceData',
  index: 0,
}, {
  subsection: 'predictive_power',
  subsection_title: 'ROC Curve',
  section: 'predictive_power',
  section_title: 'Predictive Power',
  unit: 'count',
  description: 'The Receiver Operating Characteristic (ROC) curve is an industry-standard way to evaluate binary classification models. The more space between the curve and the grey line, the more accurate your model is.',
  cardTitle: 'Predictive Power: ROC Curve',
  chartFunc: '_getPredictivePowerChart',
  filters: [ /*'_getAccuracyRateChartTypeFilter', */'_getDataSourceTypeFilter', ],
  // dataFunc: '_transformDataSourceData',
  index: 1,
}, {
  subsection: 'predictive_power',
  subsection_title: 'K-S Curve',
  section: 'predictive_power',
  section_title: 'Predictive Power',
  unit: 'percentage',
  description: 'The K-S curve is an industry-standard way to evaluate binary classification models. The more space between the curves, the more powerful your model is.',
  cardTitle: 'Predictive Power: K-S Curve',
  chartFunc: '_getKSCurveCharts',
  filters: [ /*'_getAccuracyRateChartTypeFilter', */'_getProviderFilter', '_getDataSourceTypeFilter', ],
  // dataFunc: '_transformDataSourceData',
  index: 2,
}, {
  subsection: 'accuracy_rate',
  subsection_title: 'Summary',
  section: 'accuracy_rate',
  section_title: 'Accuracy Rate',
  description: 'Measures the percent of decisions that are correct. Higher values indicate more accurate models.',
  cardTitle: 'Accuracy Rate: Summary',
  unit: 'percentage',
  chartFunc: '_getAccuracyRateCharts',
  filters: [ /*'_getAccuracyRateChartTypeFilter', */'_getDataSourceTypeFilter', ],
  index: 3,
}, {
  subsection: 'accuracy_rate',
  subsection_title: 'Threshold Analysis',
  section: 'accuracy_rate',
  section_title: 'Accuracy Rate',
  description: 'Measures the percent of decisions that are correct at various thresholds. Higher values indicate more accurate models.',
  cardTitle: 'Accuracy Rate: Threshold Analysis',
  unit: 'percentage',
  chartFunc: '_getAccuracyRateCharts',
  filters: [ /*'_getAccuracyRateChartTypeFilter', */'_getDataSourceTypeFilter', ],
  index: 4,
},
{
  subsection: 'resiliency',
  subsection_title: 'Summary',
  section: 'resiliency',
  section_title: 'Resiliency',
  unit: 'count',
  cardTitle: 'Resiliency: Summary',
  description: 'Measures the difference between model performance on testing and training data to identify overfit risk. Higher values indicate more resilient models.',
  chartFunc: '_getResiliencyBarCharts',
  filters: [],
  dataFunc: '_transformDataSourceData',
  index: 5,
}, {
  subsection: 'resiliency',
  subsection_title: 'Testing vs. Training Results',
  section: 'resiliency',
  section_title: 'Resiliency',
  unit: 'count',
  cardTitle: 'Resiliency: Testing vs. Training Results',
  description: 'The Receiver Operating Characteristic (ROC) curve is an industry-standard way to evaluate binary classification models. The chart below compares the ROC curve calculated against both training and testing data. The closer the results, the more resilient your model is.',
  chartFunc: '_getResiliencyScatterCharts',
  filters: ['_getProviderFilter',],
  dataFunc: '_transformDataSourceData',
  index: 6,
},
/*{
  subsection: 'decision_speed',
  subsection_title: 'Decision Speed',
  section: 'decision_speed',
  section_title: 'Decision Speed',
  unit: 'count',
  cardTitle: 'Decision Speed',
  chartFunc: '_getDecisionSpeedCharts',
  tableFunc: '_getDataSourceTables',
  filters: [],
  dataFunc: '_transformDataSourceData',
  index: 3,
},*/
{
  subsection: 'distributions',
  subsection_title: 'Percentages',
  section: 'distributions',
  section_title: 'Distributions',
  unit: 'percentage',
  description: 'Displays the distribution of decision results.',
  cardTitle: 'Distributions: Percentages',
  chartFunc: '_getDistributionCharts',
  filters: [ '_getProviderFilter',
    '_getDistributionGranularityFilter', '_getDataSourceTypeFilter', ],
  dataFunc: '_transformDataSourceData',
  index: 7,
}, {
  subsection: 'distributions',
  subsection_title: 'Counts',
  section: 'distributions',
  section_title: 'Distributions',
  unit: 'count',
  description: 'Displays the distribution of decision results.',
  cardTitle: 'Distributions: Counts',
  chartFunc: '_getDistributionCharts',
  filters: [ '_getProviderFilter',
    '_getDistributionGranularityFilter', '_getDataSourceTypeFilter', ],
  dataFunc: '_transformDataSourceData',
  index: 8,
},
]

const regression = [
  {
    subsection: 'predictive_power',
    subsection_title: 'Summary',
    section: 'predictive_power',
    section_title: 'Predictive Power',
    description: 'Measures predictive power on a scale of 0 to 1 based on R-squared. Higher values indicate more accurate models.',
    unit: 'count',
    cardTitle: 'Predictive Power: Summary',
    chartFunc: '_getPredictivePowerChart',
    // tableFunc: '_getDataSourceTables',
    filters: [ '_getDataSourceTypeFilter', ],
    // dataFunc: '_transformDataSourceData',
    index: 0,
  }, {
    subsection: 'predictive_power',
    subsection_title: 'Confidence Intervals',
    section: 'predictive_power',
    section_title: 'Predictive Power',
    description: 'Displays the interval for which a given percentage of decisions will fall, as well as the historical observations. Tighter confidence intervals indicate more accurate models.',
    unit: 'count',
    cardTitle: 'Predictive Power: Confidence Intervals',
    chartFunc: '_getRegressionConfidenceIntervalCharts',
    filters: [ '_getProviderFilter', '_getRegressionPlotFilter', '_getDataSourceTypeFilter', '_getConfidenceIntervalsFilter'],
    index: 1,
  }, {
    subsection: 'resiliency',
    subsection_title: 'Summary',
    section: 'resiliency',
    section_title: 'Resiliency',
    unit: 'count',
    cardTitle: 'Resiliency: Summary',
    description: 'Measures the difference between model performance on testing and training data. Higher values indicate more resilient models.',
    chartFunc: '_getResiliencyBarCharts',
    tableFunc: '_getDataSourceTables',
    filters: [],
    dataFunc: '_transformDataSourceData',
    index: 2,
  }, {
    subsection: 'resiliency',
    subsection_title: 'Detail (Test vs. Train)',
    section: 'resiliency',
    section_title: 'Resiliency',
    unit: 'count',
    cardTitle: 'Resiliency: Detail (Test vs. Train)',
    description: 'Measures the difference between model performance on testing and training data. Higher values indicate more resilient models.',
    chartFunc: '_getResiliencyScatterRegressionCharts',
    tableFunc: '_getDataSourceTables',
    filters: ['_getProviderFilter', '_getRegressionPlotFilter' ],
    dataFunc: '_transformDataSourceData',
    index: 3,
  }, {
    subsection: 'distributions',
    subsection_title: 'Prediction Ranges',
    section: 'distributions',
    section_title: 'Distributions',
    description: 'Displays the number of predictions that fall into given ranges.',
    unit: 'count',
    cardTitle: 'Distributions: Prediction Ranges',
    chartFunc: '_getRegressionDistributionCharts',
    // tableFunc: '_getDataSourceTables',
    filters: [ '_getProviderFilter', '_getDataSourceTypeFilter', ],
    dataFunc: '_transformDataSourceData',
    index: 4,
  } /*{
    subsection: 'decision_speed',
    subsection_title: 'Decision Speed',
    section: 'decision_speed',
    section_title: 'Decision Speed',
    unit: 'count',
    cardTitle: 'Decision Speed',
    chartFunc: '_getDecisionSpeedCharts',
    tableFunc: '_getDataSourceTables',
    filters: [],
    dataFunc: '_transformDataSourceData',
    index: 2,
  }, */ /*{
    subsection: 'distributions',
    subsection_title: 'Percentages',
    section: 'distributions',
    section_title: 'Distributions',
    description: 'Displays the distribution of decision results.',
    unit: 'percentage',
    cardTitle: 'Distributions: Percentages',
    chartFunc: '_getRegressionConfidenceIntervalCharts',
    // tableFunc: '_getDataSourceTables',
    filters: [ '_getProviderFilter',
      '_getRegressionPlotFilter', '_getConfidenceIntervalsFilter', '_getDataSourceTypeFilter', ],
    dataFunc: '_transformDataSourceData',
    index: 4,
  }, {
    subsection: 'distributions',
    subsection_title: 'Counts',
    section: 'distributions',
    section_title: 'Distributions',
    description: 'Displays the distribution of decision results.',
    unit: 'count',
    cardTitle: 'Distributions: Counts',
    chartFunc: '_getRegressionConfidenceIntervalCharts',
    // tableFunc: '_getDataSourceTables',
    filters: [ '_getProviderFilter',
      '_getRegressionPlotFilter', '_getConfidenceIntervalsFilter', '_getDataSourceTypeFilter', ],
    dataFunc: '_transformDataSourceData',
    index: 5,
  },*/
]

const categorical = [
  {
    subsection: 'predictive_power',
    subsection_title: 'Summary',
    section: 'predictive_power',
    section_title: 'Predictive Power',
    description: 'Measures predictive power on a scale of 0 to 1, with higher values indicating better models.',
    unit: 'count',
    cardTitle: 'Predictive Power: Summary',
    chartFunc: '_getPredictivePowerChart',
    // tableFunc: '_getDataSourceTables',
    filters: [ '_getDataSourceTypeFilter', ],
    // dataFunc: '_transformDataSourceData',
    index: 0,
  }, {
    subsection: 'predictive_power',
    subsection_title: 'Detail (ROC Curve)',
    section: 'predictive_power',
    section_title: 'Predictive Power',
    description: 'Measures predictive power on a scale of 0 to 1, with higher values indicating better models.',
    unit: 'count',
    cardTitle: 'Predictive Power: Detail (ROC Curve)',
    chartFunc: '_getPredictivePowerChart',
    // tableFunc: '_getDataSourceTables',
    filters: [ '_getDataSourceTypeFilter', ],
    // dataFunc: '_transformDataSourceData',
    index: 1,
  }, {
    subsection: 'accuracy_rate',
    subsection_title: 'Summary',
    description: 'Measures the percent of decisions that are correct.  Higher values indicate more accurate models.',
    section: 'accuracy_rate',
    section_title: 'Accuracy Rate',
    cardTitle: 'Accuracy Rate: Summary',
    unit: 'percentage',
    chartFunc: '__getCategoricalAccuracyRateCharts',
    // tableFunc: '_getAccuracyRateTables',
    filters: [ '_getDataSourceTypeFilter', ],
    index: 2,
  }, {
    subsection: 'accuracy_rate',
    subsection_title: 'Detail (Thresholds)',
    description: 'Measures the percent of decisions that are correct.  Higher values indicate more accurate models.',
    section: 'accuracy_rate',
    section_title: 'Accuracy Rate',
    cardTitle: 'Accuracy Rate: Detail (Thresholds)',
    unit: 'percentage',
    chartFunc: '_getAccuracyRateCharts',
    // tableFunc: '_getAccuracyRateTables',
    filters: [ '_getDataSourceTypeFilter', ],
    index: 3,
  }, {
    subsection: 'resiliency',
    subsection_title: 'Summary',
    section: 'resiliency',
    section_title: 'Resiliency',
    unit: 'count',
    cardTitle: 'Resiliency: Summary',
    description: 'Measures the difference between model performance on testing and training data to identify overfit risk. Lower values are better.',
    chartFunc: '_getResiliencyBarCharts',
    tableFunc: '_getDataSourceTables',
    filters: [],
    dataFunc: '_transformDataSourceData',
    index: 4,
  }, {
    subsection: 'resiliency',
    subsection_title: 'Detail (Test vs. Train)',
    section: 'resiliency',
    section_title: 'Resiliency',
    unit: 'count',
    cardTitle: 'Resiliency: Detail (Test vs. Train)',
    description: 'Measures the difference between model performance on testing and training data to identify overfit risk. Lower values are better.',
    chartFunc: '_getResiliencyBarCharts',
    tableFunc: '_getDataSourceTables',
    filters: [],
    dataFunc: '_transformDataSourceData',
    index: 5,
  }, /* {
    subsection: 'decision_speed',
    subsection_title: 'Decision Speed',
    section: 'decision_speed',
    section_title: 'Decision Speed',
    unit: 'count',
    cardTitle: 'Decision Speed',
    chartFunc: '_getDecisionSpeedCharts',
    tableFunc: '_getDataSourceTables',
    filters: [],
    dataFunc: '_transformDataSourceData',
    index: 3,
  }, */{
    subsection: 'distributions',
    subsection_title: 'Percentages',
    section: 'distributions',
    section_title: 'Distributions',
    description: 'Displays the distribution of decision results.',
    unit: 'percentage',
    cardTitle: 'Distributions: Percentages',
    chartFunc: '_getCategoricalAccuracyCharts',
    // tableFunc: '_getDataSourceTables',
    filters: [ '_getProviderFilter', '_getDataSourceTypeFilter', ],
    dataFunc: '_transformDataSourceData',
    index: 6,
  }, {
    subsection: 'distributions',
    subsection_title: 'Counts',
    section: 'distributions',
    section_title: 'Distributions',
    description: 'Displays the distribution of decision results.',
    unit: 'count',
    cardTitle: 'Distributions: Counts',
    chartFunc: '_getCategoricalAccuracyCharts',
    // tableFunc: '_getDataSourceTables',
    filters: [ '_getProviderFilter', '_getDataSourceTypeFilter', ],
    dataFunc: '_transformDataSourceData',
    index: 7,
  },
];

const PROVIDER_LABEL = {
  aws: 'Linear/Logistic Regression + SGD',
  sagemaker_ll: 'Linear Learner',
  sagemaker_xgb: 'Extreme Gradient Boosted Trees',
  decision_tree: 'Decision Tree',
  random_forest: 'Random Forest',
  neural_network: 'Artificial Neural Network'
};

const PROVIDER_ICON = {
  aws: '/images/brand/amazonml.png',
  sagemaker_ll: '/images/brand/linearlearnernew.png',
  sagemaker_xgb: '/images/brand/xgb.png',
  decision_tree: '/images/brand/decision_tree.png',
  random_forest: '/images/brand/random_forest.png',
  neural_network: '/images/brand/neural_network.png',
};
const PROVIDER_COLORS = {
  aws: 'rgb(255,153,0)',
  sagemaker_ll: 'rgb(214,77,94)',
  sagemaker_xgb: 'rgb(24,159,221)',
  decision_tree: 'rgb(47,85,151)',
  random_forest: 'rgb(112,173,71)',
  neural_network: 'rgb(161,102,255)',
};

const PROVIDER_VALUE = {
  'Linear/Logistic Regression + SGD': 'aws',
  'Linear Learner': 'sagemaker_ll',
  'Extreme Gradient Boosted Trees': 'sagemaker_xgb',
  'Decision Tree': 'decision_tree',
  'Random Forest': 'random_forest',
  'Neural Network': 'neural_network',
};

const MODEL_DESCRIPTION = {
  'aws': 'Amazon Machine Learning is a machine learning platform used to train binary, linear and categorical models. Amazon ML uses industry-standard algorithms including linear regression, logistic regression, multinomial logistic regression combined with the stochastic gradient descent optimization technique.',
  'sagemaker_ll': 'Linear Learner is a machine learning algorithm used to create binary, linear and categorical models. It is part of Amazon Sagemaker, a leading machine learning platform that uses industry-leading algorithms to train predictive models.',
  'sagemaker_xgb': 'XGBoost is an open source machine learning library used to train binary, linear and categorical models. XGBoost implements machine learning algorithms under the gradient boosting framework and provides parallel tree boosting that solves many data science problems in a fast and accurate way.',
  'decision_tree': 'A decision tree model',
  'random_forest': 'A random forest model',
  'neural_network': 'A neural network model',
};
const PROVIDER_COLOR = {
  'aws': '#FF9900',
  'sagemaker_ll': '#d64d5e',
  'sagemaker_xgb': '#189fdd',
  'decision_tree': '#2f5597',
  'random_forest': '#70ad47',
  'neural_network': '#a166ff',
};
const MODEL_TYPE_MAP = {
  'binary': 'Binary',
  'categorical': 'Categorical',
  'regression': 'Linear',
  'lending': 'Lending Default Rate',
};

const CHARTDATA_DOWNLOAD_MAP = {
  input_analysis: [ {
    title: 'Total Loan Volume By Count',
    headers: [ 'Fully Paid', 'Charged Off' ],
    values: [ 'actual_1_count', 'actual_0_count' ],
  }, {
    title: 'Total Loan Volume By Amount',
    headers: [ 'Fully Paid', 'Charged Off' ],
    values: [ 'actual_1_amt', 'actual_0_amt' ],
  }, {
    title: 'Percent Of Total Loan Volume By Count',
    headers: [ 'Fully Paid', 'Charged Off' ],
    values: [ 'actual_1_count_pct', 'actual_0_count_pct' ],
  }, {
    title: 'Percent Of Total Loan Volume By Amount',
    headers: [ 'Fully Paid', 'Charged Off' ],
    values: [ 'actual_1_amt_pct', 'actual_0_amt_pct' ],
  }, {
    title: 'Average Loan Size',
    headers: [ 'Average Loan Size' ],
    values: [ 'avg_loan_size', ],
  }, {
    title: 'Average Interest Rate',
    headers: [ 'Average Interest Rate' ],
    values: [ 'avg_interest_rate', ],
  }, {
    title: 'Annual Default Rate',
    headers: [ 'Annual Default Rate' ],
    values: [ 'annual_default_rate', ],
  }, {
    title: 'Annual Yield',
    headers: [ 'Annual Yield' ],
    values: [ 'annual_yield', ],
  }, {
    title: 'Cumulative Default Time Series By Count',
    headers: [ 'Month', 'Cumulative Default Rate %' ],
    time_series: true,
    values: [ 'time_series_cdr_count', ],
  }, {
    title: 'Cumulative Default Time Series By Amount',
    headers: [ 'Month', 'Cumulative Default Rate %' ],
    time_series: true,
    values: [ 'time_series_cdr_amt', ],
  }, 
  ],
  score_analysis: [{
    title: 'Loan Volume By Count',
    headers: ['DigiFi Score', 'Fully Paid', 'Charged Off'],
    values: ['fully_paid', 'charged_off'],
    outer_value: 'loan_volume_by_count_rows',
    nestedValues: true,
    granularity: false,
  }, {
    title: 'Loan Volume By Amount',
    headers: ['DigiFi Score', 'Fully Paid', 'Charged Off'],
    values: ['fully_paid', 'charged_off'],
    outer_value: 'loan_volume_by_amount_rows',
    nestedValues: true,
    granularity: false,
  }, {
    title: 'Annual Default Rate',
    headers: ['DigiFi Score', 'Annual Default Rate %'],
    values: ['adr'],
    granularity: true,
  }, {
    title: 'Cumulative Default Rate By Count',
    headers: ['DigiFi Score', 'Cumulative Default Rate %'],
    values: ['cdr_by_count_rows'],
    granularity: true,
  }, {
    title: 'Cumulative Default Rate By Amount',
    headers: ['DigiFi Score', 'Cumulative Default Rate %'],
    values: ['cdr_by_amount_rows'],
    granularity: true,
  }, {
    title: 'Time Series By Count',
    headers: ['DigiFi Score', 'Cumulative Default Rate %'],
    values: ['by_count'],
    outer_value: 'time_series',
    time_series: true,
    granularity: true,
  }, {
    title: 'Time Series By Amount',
    headers: ['DigiFi Score', 'Cumulative Default Rate %'],
    values: ['by_amount'],
    outer_value: 'time_series',
    time_series: true,
    granularity: true,
  }]
}

module.exports = {
  binary,
  regression,
  categorical,
  CHARTDATA_DOWNLOAD_MAP,
  PROVIDER_LABEL,
  PROVIDER_ICON,
  PROVIDER_COLORS,
  PROVIDER_VALUE,
  MODEL_DESCRIPTION,
  PROVIDER_COLOR,
  MODEL_TYPE_MAP,
};